#!/usr/bin/env node

'use strict';

process.title = 'stencil';
process.on('unhandledRejection', function(r) { console.error(r) });
process.env.IONIC_CLI_BIN = __filename;


var chalk = require('chalk');
var path = require('path');

var versionMatch = process.version.match(/(\d).(\d)/);
if (versionMatch && parseFloat(versionMatch[0]) < 6.4) {
  console.error(chalk.red('ERR: Your Node.js version is ' + chalk.bold(process.version) + '. Please update to the latest Node LTS version.\n'));
  process.exit(1);
}

var cmdArgs = process.argv;
try {
  var npmRunArgs = process.env.npm_config_argv;
  if (npmRunArgs) {
    cmdArgs = cmdArgs.concat(JSON.parse(npmRunArgs).original);
  }
} catch (e) {}


var config = {
  process: process,
  sys: require('./sys')
};


var configFileName = 'stencil.config.js';

var appConfigFileNameCmdIndex = cmdArgs.indexOf('--config');
if (appConfigFileNameCmdIndex > -1) {
  configFileName = cmdArgs[appConfigFileNameCmdIndex + 1];

} else {
  appConfigFileNameCmdIndex = cmdArgs.indexOf('-c');
  if (appConfigFileNameCmdIndex > -1) {
    configFileName = cmdArgs[appConfigFileNameCmdIndex + 1];
  }
}

var configFilePath = configFileName;
if (!path.isAbsolute(configFilePath)) {
  configFilePath = path.join(process.cwd(), configFilePath);
}


try {
  var configFile = require(configFilePath);

  if (!configFile.config) {
    console.error('Invalid Stencil "' + chalk.bold(configFilePath) + '" configuration file. Missing "config" property.');
    process.exit(1);
  }

  Object.assign(config, configFile.config);

} catch(e) {
  console.error('Error reading Stencil "' + chalk.bold(configFilePath) + '" configuration file.');
  process.exit(1);
}


if (!config.rootDir) {
  config.rootDir = path.dirname(configFilePath);
}


function help() {
  var p = chalk.dim((process.platform === 'win32') ? '>' : '$');

  console.log(`
  ${chalk.bold(chalk.green('stencil build') + ' - Build your stencil project')}

    This command line tool allows you to build stencil collections and applications.

  ${chalk.bold('Usage:')}

    ${p} ${chalk.green('stencil build [--prod] [--watch] [--debug]')}

  ${chalk.bold('Options:')}

    ${chalk.green('--prod')} ................. Execute a production build.
    ${chalk.green('--watch')} ................ Execute a build in watch mode.
    ${chalk.green('--debug')} ................ Set the log level to debug.
    ${chalk.green('--config')} ............... Stencil config file.

  ${chalk.bold('Examples:')}

    ${p} ${chalk.green('stencil build --prod')}
    ${p} ${chalk.green('stencil build --watch')}

`);
}

if (cmdArgs.indexOf('--help') > -1 || cmdArgs.indexOf('-h') > -1) {
  help();
  process.exit(0);
}

if (cmdArgs.indexOf('--prod') > -1 || cmdArgs.indexOf('-p') > -1) {
  config.devMode = false;
}

if (cmdArgs.indexOf('--watch') > -1 || cmdArgs.indexOf('-w') > -1) {
  config.watch = true;
}

if (cmdArgs.indexOf('--debug') > -1) {
  config.logLevel = 'debug';

} else {
  var logLevelCmdIndex = cmdArgs.indexOf('--log-level');
  if (logLevelCmdIndex > -1) {
    config.logLevel = cmdArgs[logLevelCmdIndex + 1];
  }
}


var stencil = require(path.join(__dirname, '..', 'dist' , 'compiler'));

if (!config.logger) {
  var logger = require(path.join(__dirname, 'logger'));
  config.logger = new logger.CommandLineLogger({
    level: config.logLevel,
    process: process,
    chalk: chalk
  });
}


switch (cmdArgs[2]) {
  case 'build':
    stencil.build(config);
    if (config.watch) {
      process.once('SIGINT', () => {
        process.exit(0);
      });
    }
    break;

  default:
    help();
    process.exit(1);
}
